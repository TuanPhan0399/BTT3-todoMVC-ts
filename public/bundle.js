/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("\n// Selector\nconst taskInput = document.querySelector(\".task-input input\");\nconst taskBox = document.querySelector(\".task-box\");\nconst filters = document.querySelectorAll(\".filters > span\");\nconst controls = document.querySelector(\".controls\");\nconst iTaskInput = document.querySelector(\".task-input i\");\nconst clearAll = document.querySelector(\".clear-btn\");\nlet count = document.querySelector(\".count\");\n// Variable\nlet countIndex;\nlet idFilter = \"all\";\n// getting localstorage todo-list\nlet todos = JSON.parse(localStorage.getItem(\"todo-list\") || \"[]\");\nlet taskInfo;\n// Event Listener\ntaskInput.addEventListener(\"keyup\", saveTask);\nclearAll.addEventListener(\"click\", clearAllCompleted);\niTaskInput.addEventListener(\"click\", takeAll);\n// Work with filters\nfilters.forEach((btn) => {\n    btn.addEventListener(\"click\", () => {\n        var _a;\n        (_a = document.querySelector(\"span.active\")) === null || _a === void 0 ? void 0 : _a.classList.remove(\"active\");\n        btn.classList.add(\"active\");\n        showTodo(btn.id);\n        return (idFilter = btn.id);\n    });\n});\n// window\nwindow.updateStatus = updateStatus;\nwindow.deleteTask = deleteTask;\nwindow.editTask = editTask;\nwindow.editSpan = editSpan;\n// Function\nfunction showTodo(filter) {\n    let li = \"\";\n    countIndex = todos.length;\n    if (todos) {\n        todos.forEach((todo, id) => {\n            // handle count\n            if (todo.taskStatus === \"completed\") {\n                countIndex -= 1;\n            }\n            // if todo status is completed, set the isCompleted value checked\n            let isCompleted = todo.taskStatus === \"completed\" ? \"checked\" : \"\";\n            if (filter === todo.taskStatus || filter === \"all\") {\n                li += `<li class=\"task\">\n                <div>\n                  <input onchange=\"updateStatus(this)\" type=\"checkbox\" id=\"${id}\" ${isCompleted}>\n                  <span ondblclick=\"editTask(this)\" class=\"${id} ${isCompleted}\">${todo.taskValue}</span>\n                </div>\n                <div class=\"task-close\">\n                  <i onclick=\"deleteTask(${id})\" class=\"fa-solid fa-xmark\"></i>\n                </div>\n              </li>`;\n            }\n            if (todo.taskStatus === \"completed\") {\n                clearAll.style.opacity = \"1\";\n            }\n        });\n    }\n    let todo = todos.filter((todo) => todo.taskStatus === \"completed\");\n    if (todo.length === todos.length) {\n        iTaskInput.classList.add(\"tick-all\");\n    }\n    else {\n        iTaskInput.classList.remove(\"tick-all\");\n    }\n    taskBox.innerHTML = li;\n    if (todos.length > 0) {\n        controls.style.display = \"flex\";\n        iTaskInput.style.display = \"block\";\n        count.innerText = countIndex.toString();\n    }\n    else {\n        controls.style.display = \"none\";\n    }\n}\nshowTodo(idFilter);\n// check iput\nfunction updateStatus(selectedTask) {\n    var _a, _b;\n    let liTask = (_a = selectedTask.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\n    // Getting paragraph that contains task name\n    let taskName = (_b = selectedTask.parentElement) === null || _b === void 0 ? void 0 : _b.lastElementChild;\n    const filterStatus = Array.from(filters);\n    let filterActive = filterStatus.filter((e) => e.classList[0] === \"active\");\n    // Getting ID\n    let id = Number(selectedTask.id);\n    if (selectedTask.checked) {\n        taskName.classList.add(\"checked\");\n        // updating the status of selected task to completed\n        todos[id].taskStatus = \"completed\";\n        clearAll.style.opacity = \"1\";\n        countIndex -= 1;\n    }\n    else {\n        taskName.classList.remove(\"checked\");\n        // updating the status of selected task to pending\n        todos[id].taskStatus = \"pending\";\n        countIndex += 1;\n    }\n    // tick all\n    let todo = todos.filter((todo) => todo.taskStatus === \"completed\");\n    if (todo.length === todos.length) {\n        iTaskInput.classList.add(\"tick-all\");\n    }\n    else {\n        iTaskInput.classList.remove(\"tick-all\");\n    }\n    // fix clear all\n    let todoPending = todos.filter((todoPending) => todoPending.taskStatus === \"pending\");\n    if (todoPending.length === todos.length) {\n        clearAll.style.opacity = \"0\";\n    }\n    // fix bug active\n    if (filterActive[0].id === \"completed\" && selectedTask.checked === false) {\n        liTask.style.display = \"none\";\n    }\n    else if (filterActive[0].id === \"pending\" && selectedTask.checked) {\n        liTask.style.display = \"none\";\n    }\n    else if (filterActive[0].id === \"all\") {\n        liTask.style.display = \"flex\";\n    }\n    count.innerText = countIndex.toString();\n    localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n}\n// Save to local\nfunction saveTask(e) {\n    // Do not take spaces and null characters\n    let userTask = taskInput.value.trim();\n    if (e.key === \"Enter\" && userTask) {\n        taskInput.value = \"\";\n        // Add one task new on todos\n        taskInfo = {\n            taskValue: userTask,\n            taskStatus: \"pending\",\n        };\n        iTaskInput.classList.remove(\"tick-all\");\n        todos.push(taskInfo);\n        localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n        showTodo(idFilter);\n    }\n}\n// Deleted task\nfunction deleteTask(deleteID) {\n    // remove selected task\n    todos.splice(deleteID, 1);\n    localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n    if (todos.length === 0) {\n        controls.style.display = \"none\";\n        iTaskInput.style.display = \"none\";\n    }\n    showTodo(idFilter);\n}\n// Data editing function\nfunction editTask(span) {\n    var _a, _b, _c;\n    const taskClose = ((_b = (_a = span.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.lastElementChild);\n    const input = (_c = span.parentElement) === null || _c === void 0 ? void 0 : _c.firstElementChild;\n    taskClose.style.opacity = \"0\";\n    input.style.opacity = \"0\";\n    let valueInput = span.innerText;\n    span.innerText = \"\";\n    span.innerHTML += `<input onclick=\"editSpan(this)\" type=\"text\" value=\"${valueInput}\"></input>`;\n}\n// new data editting add with local\nfunction editSpan(input) {\n    var _a, _b, _c;\n    const span = input.parentElement;\n    const tickInput = (_a = span.parentElement) === null || _a === void 0 ? void 0 : _a.firstElementChild;\n    const taskClose = ((_c = (_b = span.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.lastElementChild);\n    const id = Number(span.classList[0]);\n    // add enter\n    input.addEventListener(\"keyup\", (event) => {\n        if (event.key === \"Enter\" && input.value.trim()) {\n            event.preventDefault();\n            span.innerText = input.value.trim();\n            input.style.display = \"none\";\n            taskClose.style.opacity = \"1\";\n            tickInput.style.opacity = \"1\";\n            todos[id].taskValue = span.innerText;\n            localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n        }\n        else if (event.key === \"Enter\" && input.value === \"\") {\n            todos.splice(id, 1);\n            localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n            showTodo(idFilter);\n        }\n    });\n    // add blur\n    input.addEventListener(\"blur\", (event) => {\n        if (input.value.trim()) {\n            event.preventDefault();\n            span.innerText = input.value.trim();\n            input.style.display = \"none\";\n            taskClose.style.opacity = \"1\";\n            tickInput.style.opacity = \"1\";\n            todos[id].taskValue = span.innerText;\n        }\n        else {\n            todos.splice(id, 1);\n        }\n        localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n        showTodo(idFilter);\n    });\n}\nconsole.log(typeof todos);\n// clear all\nfunction clearAllCompleted() {\n    // removing selected task\n    const todos2 = todos.filter((todo) => todo.taskStatus !== \"completed\");\n    todos = todos2;\n    if (todos.length === 0) {\n        iTaskInput.style.display = \"none\";\n        controls.style.display = \"none\";\n    }\n    clearAll.style.opacity = \"0\";\n    localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n    showTodo(idFilter);\n}\n// select all input\nfunction takeAll() {\n    if (iTaskInput.classList.contains(\"tick-all\") == false) {\n        clearAll.style.opacity = \"1\";\n        iTaskInput.classList.add(\"tick-all\");\n        todos.forEach((todo) => {\n            todo.taskStatus = \"completed\";\n        });\n    }\n    else {\n        clearAll.style.opacity = \"0\";\n        iTaskInput.classList.remove(\"tick-all\");\n        todos.forEach((todo) => {\n            todo.taskValue = \"pending\";\n        });\n    }\n    localStorage.setItem(\"todo-list\", JSON.stringify(todos));\n    showTodo(idFilter);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;